// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/venomuz/alif-task/internal/models"
)

// MockAccounts is a mock of Accounts interface.
type MockAccounts struct {
	ctrl     *gomock.Controller
	recorder *MockAccountsMockRecorder
}

// MockAccountsMockRecorder is the mock recorder for MockAccounts.
type MockAccountsMockRecorder struct {
	mock *MockAccounts
}

// NewMockAccounts creates a new mock instance.
func NewMockAccounts(ctrl *gomock.Controller) *MockAccounts {
	mock := &MockAccounts{ctrl: ctrl}
	mock.recorder = &MockAccountsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccounts) EXPECT() *MockAccountsMockRecorder {
	return m.recorder
}

// GetByAccessToken mocks base method.
func (m *MockAccounts) GetByAccessToken(ctx context.Context, accessToken string) (models.AccountOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAccessToken", ctx, accessToken)
	ret0, _ := ret[0].(models.AccountOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAccessToken indicates an expected call of GetByAccessToken.
func (mr *MockAccountsMockRecorder) GetByAccessToken(ctx, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAccessToken", reflect.TypeOf((*MockAccounts)(nil).GetByAccessToken), ctx, accessToken)
}

// GetByID mocks base method.
func (m *MockAccounts) GetByID(ctx context.Context, ID uint32) (models.AccountOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, ID)
	ret0, _ := ret[0].(models.AccountOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAccountsMockRecorder) GetByID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAccounts)(nil).GetByID), ctx, ID)
}

// SingIn mocks base method.
func (m *MockAccounts) SingIn(ctx context.Context, input models.SingInAccountInput) (models.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SingIn", ctx, input)
	ret0, _ := ret[0].(models.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SingIn indicates an expected call of SingIn.
func (mr *MockAccountsMockRecorder) SingIn(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SingIn", reflect.TypeOf((*MockAccounts)(nil).SingIn), ctx, input)
}

// SingUp mocks base method.
func (m *MockAccounts) SingUp(ctx context.Context, input models.SignUpAccountInput) (models.AccountOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SingUp", ctx, input)
	ret0, _ := ret[0].(models.AccountOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SingUp indicates an expected call of SingUp.
func (mr *MockAccountsMockRecorder) SingUp(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SingUp", reflect.TypeOf((*MockAccounts)(nil).SingUp), ctx, input)
}

// Update mocks base method.
func (m *MockAccounts) Update(ctx context.Context, input models.UpdateAccountInput) (models.AccountOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, input)
	ret0, _ := ret[0].(models.AccountOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAccountsMockRecorder) Update(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccounts)(nil).Update), ctx, input)
}

// MockTransactions is a mock of Transactions interface.
type MockTransactions struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionsMockRecorder
}

// MockTransactionsMockRecorder is the mock recorder for MockTransactions.
type MockTransactionsMockRecorder struct {
	mock *MockTransactions
}

// NewMockTransactions creates a new mock instance.
func NewMockTransactions(ctrl *gomock.Controller) *MockTransactions {
	mock := &MockTransactions{ctrl: ctrl}
	mock.recorder = &MockTransactionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactions) EXPECT() *MockTransactionsMockRecorder {
	return m.recorder
}

// TopUp mocks base method.
func (m *MockTransactions) TopUp(ctx context.Context, input models.TopUpInput) (models.TransactionOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopUp", ctx, input)
	ret0, _ := ret[0].(models.TransactionOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopUp indicates an expected call of TopUp.
func (mr *MockTransactionsMockRecorder) TopUp(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopUp", reflect.TypeOf((*MockTransactions)(nil).TopUp), ctx, input)
}

// TransferByPhoneNumber mocks base method.
func (m *MockTransactions) TransferByPhoneNumber(ctx context.Context, input models.TransferByPhoneNumberInput) (models.TransactionOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferByPhoneNumber", ctx, input)
	ret0, _ := ret[0].(models.TransactionOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferByPhoneNumber indicates an expected call of TransferByPhoneNumber.
func (mr *MockTransactionsMockRecorder) TransferByPhoneNumber(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferByPhoneNumber", reflect.TypeOf((*MockTransactions)(nil).TransferByPhoneNumber), ctx, input)
}

// WithdrawalFunds mocks base method.
func (m *MockTransactions) WithdrawalFunds(ctx context.Context, input models.WithdrawalFundsInput) (models.TransactionOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawalFunds", ctx, input)
	ret0, _ := ret[0].(models.TransactionOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithdrawalFunds indicates an expected call of WithdrawalFunds.
func (mr *MockTransactionsMockRecorder) WithdrawalFunds(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawalFunds", reflect.TypeOf((*MockTransactions)(nil).WithdrawalFunds), ctx, input)
}

// MockWallets is a mock of Wallets interface.
type MockWallets struct {
	ctrl     *gomock.Controller
	recorder *MockWalletsMockRecorder
}

// MockWalletsMockRecorder is the mock recorder for MockWallets.
type MockWalletsMockRecorder struct {
	mock *MockWallets
}

// NewMockWallets creates a new mock instance.
func NewMockWallets(ctrl *gomock.Controller) *MockWallets {
	mock := &MockWallets{ctrl: ctrl}
	mock.recorder = &MockWalletsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWallets) EXPECT() *MockWalletsMockRecorder {
	return m.recorder
}

// GetByAccountID mocks base method.
func (m *MockWallets) GetByAccountID(ctx context.Context, accountID uuid.UUID) (models.WalletOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAccountID", ctx, accountID)
	ret0, _ := ret[0].(models.WalletOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAccountID indicates an expected call of GetByAccountID.
func (mr *MockWalletsMockRecorder) GetByAccountID(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAccountID", reflect.TypeOf((*MockWallets)(nil).GetByAccountID), ctx, accountID)
}
